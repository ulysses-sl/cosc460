package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    JoinPredicate pred;
    DbIterator childit1, childit2;
    Tuple t1, t2;
    boolean isOpen;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        pred = p;
        childit1 = child1;
        childit2 = child2;
        isOpen = false;
        t1 = null;
        t2 = null;
    }

    public JoinPredicate getJoinPredicate() {
        return pred;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
        return childit1.getTupleDesc().getFieldName(pred.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
        return childit2.getTupleDesc().getFieldName(pred.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(childit1.getTupleDesc(), childit2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        try {
            childit1.open();
            childit2.open();
        } catch (DbException e) {
            throw new DbException("could not open");
        }
        isOpen = true;
    }

    public void close() {
        childit1.close();
        childit2.close();
        super.close();
        isOpen = false;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        if (isOpen) {
            childit1.rewind();
            childit2.rewind();
        }
        else {
            throw new DbException("open the iterator first");
        }
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p/>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p/>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (isOpen) {
            while (childit1.hasNext() || childit2.hasNext()) {
                if (t1 == null || !childit2.hasNext()) {
                    t1 = childit1.next();
                    childit2.rewind();
                }
                while (childit2.hasNext()) {
                    t2 = childit2.next();
                    if (pred.filter(t1, t2)) {
                        int n1 = childit1.getTupleDesc().numFields();
                        int n2 = childit2.getTupleDesc().numFields();
                        Tuple rv = new Tuple(getTupleDesc());
                        for (int i = 0; i < n1; i++) {
                            rv.setField(i, t1.getField(i));
                        }
                        for (int i = 0; i < n2; i++) {
                            rv.setField(i + n1, t2.getField(i));
                        }
                        return rv;
                    }
                }
            }
            return null;
        }
        else {
            throw new DbException("open iterator first");
        }
    }

    @Override
    public DbIterator[] getChildren() {
        DbIterator[] rv = { childit1, childit2 };
        return rv;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        childit1 = children[0];
        childit2 = children[1];
    }

}
